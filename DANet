import torch
import torch.nn as nn
import torch.nn.functional as F

class ChannelAttention(nn.Module):
    def __init__(self, in_channels):
        super(ChannelAttention, self).__init__()
        self.fc1 = nn.Conv2d(in_channels, in_channels // 4, kernel_size=1)
        self.fc2 = nn.Conv2d(in_channels // 4, in_channels, kernel_size=1)

    def forward(self, x):
        avg_pool = F.adaptive_avg_pool2d(x, 1)
        avg_out = self.fc2(F.relu(self.fc1(avg_pool)))
        max_pool = F.adaptive_max_pool2d(x, 1)
        max_out = self.fc2(F.relu(self.fc1(max_pool)))
        out = avg_out + max_out
        return torch.sigmoid(out) * x

class SpatialAttention(nn.Module):
    def __init__(self):
        super(SpatialAttention, self).__init__()
        self.conv1 = nn.Conv2d(2, 1, kernel_size=7, padding=3)
        self.sigmoid = nn.Sigmoid()

    def forward(self, x):
        avg_pool = torch.mean(x, dim=1, keepdim=True)
        max_pool, _ = torch.max(x, dim=1, keepdim=True)
        concat = torch.cat([avg_pool, max_pool], dim=1)
        out = self.conv1(concat)
        return self.sigmoid(out) * x

class DANet(nn.Module):
    def __init__(self, in_channels, num_classes):
        super(DANet, self).__init__()
        self.channel_attention = ChannelAttention(in_channels)
        self.spatial_attention = SpatialAttention()
        self.conv = nn.Conv2d(in_channels, num_classes, kernel_size=1)

    def forward(self, x):
        x = self.channel_attention(x)
        x = self.spatial_attention(x)
        x = self.conv(x)
        return x

# Example usage
if __name__ == "__main__":
    model = DANet(in_channels=256, num_classes=21)
    input_tensor = torch.randn(1, 256, 64, 64)  # Example input tensor
    output = model(input_tensor)
    print(output.shape)  # Expected output: torch.Size([1, 21, 64, 64])
